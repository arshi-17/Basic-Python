#OOPS
#1. class & object:

class com_lab:
    bench=2
    dustbin=1
vin=com_lab() #vin is member of class
print(vin.bench)


#2

class com_lab:
    bench=2
    dustbin=1
vin=com_lab()
sid=com_lab()
gin=com_lab()
print(vin.bench, sid.bench)


#3

class com_lab:
    bench=2
    dustbin=1
    def projector():
        print("on")
vin=com_lab()
sid=com_lab()
gin=com_lab()
com_lab.projector() #only com_lab has access but not vin, sid, gin.


#4 Instance Method:

class com_lab:
    bench=2
    dustbin=1
    def system(self):
        print("System")
    def projector():
        print("on")
vin=com_lab()
sid=com_lab()
gin=com_lab()
gin.system() #this is not accessed by class.


#5 
class com_lab:
    bench=2
    dustbin=1
    def system(self):
        print("System")
    def projector():
        print("on")
vin=com_lab()
sid=com_lab()
gin=com_lab()
com_lab.system(gin)


#6 constructor

class com_lab:
    bench=2
    dustbin=1
    def __init__(self): #constructor
        print("Welcome")
    def system(self):
        print("System")
    def projector():
        print("on")
gin=com_lab()
gin.system()


#7 Instance attribute:
class com_lab:
    def __init__(self,amt):
        self.amt=amt
    def return_back(self):
        return self.amt
gin=com_lab(10)
vin=com_lab(20)
sin=com_lab(30)
print(sin.return_back())


#Inheritance:Inheriting the properties and behavior from the parent class.
#8
class com_lab_a:
    gin=56
class com_lab_b(com_lab_a):
    sin_amt=80
sin=com_lab_b()
print(sin.sin_amt+sin.gin)


#9
class com_lab_a:
    gin=56
class com_lab_b(com_lab_a):
    sid=20
s=com_lab_b()
print(s.gin)


#10 

class a:
    def bike(self):
        print("hi")
class b:
    def car(self):
        print("helloo")
class c(a,b):
    def car(self):
        print("how r u")
obj=c()
obj.car()


#11

class a:
    def car(self):
        print("hi")
class b:
    def car(self):
        print("helloo")
class c(a,b):
    def bike(self):
        print("how r u")
obj=c()
obj.car()


#12 Multiple Inheritance: two or more parents and one child.

class a:
    def __init__(self):
        print("hi")
class b:
    def __init__(self):
        print("helloo")
class c(b,a):
    def bike(self):
        print("how r u")
obj=c()
obj.bike()


#13
class a:
    def __init__(self):
        print("hi")
class b:
    def car(self):
        print("helloo")
class c(a,b):
    def __init__(self):
        super().__init__()
    def aero(self):
        print("how r u")
obj=c()
obj.aero()


#14 multi-level Inheritance:grand parent and parent and child.

class a:
    gin=30
class b(a):
    gin=10
class c(b):
    gin=40
obj=c()
print(obj.gin)


#15   

class a:
    gin=30
class b(a):
    pass
class c(b):
    pass
obj=c()
print(obj.gin)


#16

class a:
    def __init__(self):
        print("a")
class b(a):
    def __init__(self):
        print("b")
class c(b):
    pass
obj=c()


#17

class a:
    def __init__(self):
        print("a")
class b(a):
    def __init__(self):
        print("b")
class c(b):
    pass
c()


#18

class a:
    def __init__(self):
        print("a")
class b(a):
    def __init__(self):
        print("b")
    def bike(self):
        print("bike")
class c(b):
    pass
c().bike()
c().bike()


#19 hierarchial Inheritance: One parent class and two child classes.

class a:
    def __init__(self):
        print("a")
class b(a):
    def bike(self):
        print("bike")
class c(b):
    pass
b()


#20 Hybrid Inheritance: combination of two or more inheritances.

class a:
    def __init__(self):
        print("a")
class b(a):
    def bike(self):
        print("bike")
class c(b):
    pass
class m(b):
    pass
b()


#21

class a:
    def __init__(self):
        print("a")
class b(a):
    def bike(self):
        print("bike")
class c(a):
    pass
class m(b,c):
    pass
m()


#22 Encapsulation

class gin:
    _a=10
class sin(gin):
    def __init__(self):
        print(super()._a)
    pass
sin()


#23

class com_lab:
    def __init__(self):
        self.__locker()
    def __locker(self):
        print(1000000)
com_lab()


#24 method overriding

class a:
    def sin(self,amt):
        print(amt)
class b(a):
    def sin(self,amt):
        print("1",amt)
a().sin(45)


#25 Duck typing:different class having same method name but without inheritance

class a:
    def sin(self,amt):
        print(amt)
class b:
    def sin(self,amt):
        print("1",amt)
b().sin(45)


#26 

class dog:
    def sound(self):
        print("bow")
class cat:
    def sound(self):
        print("meow")
class duck:
    def sound(self):
        print("quack")
def makee_sound(obj):
    obj.sound()
d=dog()
c=cat()
du=duck()
makee_sound(du)


#27

class cse:
    def __init__(self,t,e,m,s,so,h):
        self.t=t 
        self.e=e 
        self.m=m
        self.s=s
        self.so=so
        self.h=h
    def total(self):
        return (self.t+self.e+self.m+self.s+self.so+self.h)
    def avg(self):
        return (self.total()/6)
gin=cse(45,34,34,56,67,34)
sid=cse(34,65,46,67,23,74)
kin=cse(45,56,67,94,35,75)
print(kin.total())
print(kin.avg())


#28

class cse:
    def __init__(self,name):
        print(f"Details of {name}")
        self.t= int(input("TELUGU : "))
        self.e=int(input("ENGLISH : "))
        self.m =int(input("MATHS : "))
        self.s = int(input("SCIENCE : "))
        self.so =int(input("SOCIAL : "))
    def total(self):
        return (self.t+ self.e+self.m+self.s+self.so)
    def avg(self):
        return self.total() / 5
narasimha = cse("NARASHIMA")
yuvaraj = cse("yuvaraj")
pavan  = cse("pavan")

