#1 LINKED-LIST:
class Node:
    def __init__(self,data):
        self.data=data
        self.next = None
class Linked_list:
    def __init__(self):
        self.head=None
    def b_insert(self,data):
        newnode = Node(data)
        newnode.next = self.head
        self.head = newnode
    def e_insert(self,data):
        newnode = Node(data)
        if self.head is None:
            self.head = newnode
            return
        cur = self.head
        while cur.next:
            cur = cur.next
        cur.next = newnode
    def display(self):
        if self.head is None:
            print("empty")
            return
        cur = self.head
        while cur:
            print(cur.data,end="->")
            cur = cur.next
obj = Linked_list()
obj.b_insert(8)
obj.b_insert(10)
obj.b_insert(21)
obj.e_insert(36)
obj.display()


#2  LinkedList
class Node:
    def _init_(self,data):
        self.data=data
        self.next = None
class Linked_list:
    def _init_(self):
        self.head=None
    def b_insert(self,data):
        newnode = Node(data)
        newnode.next = self.head
        self.head = newnode
    def e_insert(self,data):
        newnode = Node(data)
        if self.head is None:
            self.head = newnode
            return
        cur = self.head
        while cur.next:
            cur = cur.next
        cur.next = newnode
    def display(self):
        if self.head is None:
            print("empty")
            return
        cur = self.head
        while cur:
            print(cur.data,end="->")
            cur = cur.next
    def e_delete(self):
        if self.head is None or self.head.next==None:
            self.head=None
            return
        cur=self.head
        while  cur.next.next:
            cur=cur.next
        cur.next=None
        
obj = Linked_list()
obj.b_insert(8)
obj.b_insert(10)
obj.b_insert(21)
obj.e_insert(36)
obj.e_delete()
obj.e_delete()
obj.e_delete()
obj.display()


#3 LinkedList deletion at begin
class Node:
    def _init_(self,data):
        self.data=data
        self.next = None
class Linked_list:
    def _init_(self):
        self.head=None
    def b_insert(self,data):
        newnode = Node(data)
        newnode.next = self.head
        self.head = newnode
    def e_insert(self,data):
        newnode = Node(data)
        if self.head is None:
            self.head = newnode
            return
        cur = self.head
        while cur.next:
            cur = cur.next
        cur.next = newnode
    def display(self):
        if self.head is None:
            print("empty")
            return
        cur = self.head
        while cur:
            print(cur.data,end="->")
            cur = cur.next
    def e_delete(self):
        if self.head is None or self.head.next==None:
            self.head=None
            return
        cur=self.head
        while  cur.next.next:
            cur=cur.next
        cur.next=None
    def b_delete(self):
        if self.head:
            self.head=self.head.next      
obj = Linked_list()
obj.b_insert(8)
obj.b_insert(10)
obj.e_insert(36)
obj.display()
print()
obj.b_delete()
obj.display()


#4
class Node:
    def __init__(self,data):
        self.data = data
        self.next = None
        self.prev = None

class Double_linkedlist:
    def __init__(self):
        self.head=self.tail=None

    def b_insert(self,data):
        newnode = Node(data)
        if self.head is None:
            self.head =self.tail= newnode
            return
        newnode.next = self.head
        self.head.prev = newnode
        self.head = newnode

    def e_insert(self,data):
        newnode = Node(data)
        if self.head is None:
            self.head =self.tail= newnode
            return
        newnode.prev = self.tail
        self.tail.next = newnode
        self.tail = newnode

    def forward_display(self):
        if self.head is None:
            print("empty")
            return
        cur = self.head
        while cur:
            print(cur.data,end="->")
            cur = cur.next

    def backward_display(self):
        if self.head is None:
            print("empty")
            return
        cur = self.tail
        while cur:
            print(cur.data, end="->")
            cur = cur.prev
    def b_delete(self):
        if self.head == self.tail:
            self.head = self.tail =None
        if self.head:
            self.head = self.head.next
            self.head.prev=None

    def e_delete(self):
        if self.head == self.tail:
            self.head = self.tail =None
        if self.tail:
            self.tail = self.tail.prev
            self.tail.next = None

    def position(self,pos):
        cur = self.head
        for i in range(pos-1):
            if cur.next is None:
                break
            cur = cur.next
        else: return cur


    def position_insert(self,data,pos):
        if pos == 1:
            self.b_insert(data)
            return
        cur = self.position(pos)
        # if cur == self.tail:
        #     self.e_insert(data)
        #     return
        newnode = Node(data)
        if cur:
            newnode.next = cur
            newnode.prev = cur.prev
            cur.prev = newnode.prev.next = newnode

    def position_delete(self, pos):
        if pos == 1:
            self.b_delete()
            return
        cur = self.position(pos)
        if cur == self.tail:
            self.e_delete()
            return
        if cur:
            cur.next.prev = cur.prev
            cur.prev.next = cur.next
            cur.prev=cur.next=None


obj = Double_linkedlist()
obj.e_insert(6)
obj.e_insert(10)
obj.e_insert(30)
obj.b_insert(5)
obj.forward_display()
print()
obj.backward_display()
obj.position_delete(2)
print()
obj.forward_display()
print()
obj.backward_display()


#5
class Node:
    def __init__(self,data):
        self.data=data
        self.next = None



class Linked_list:
    def __init__(self):
        self.head=None

    def b_insert(self,data):
        newnode = Node(data)
        newnode.next = self.head
        self.head = newnode

    def e_insert(self,data):
        newnode = Node(data)
        if self.head is None:
            self.head = newnode
            return
        cur = self.head
        while cur.next:
            cur = cur.next
        cur.next = newnode


    def e_delete(self):
        if self.head is None or self.head.next is None:
            self.head = None
            return
        cur = self.head
        while cur.next.next:
            cur = cur.next
        cur.next = None


    def b_delete(self):
        if self.head:
            self.head = self.head.next

    def pos_delete(self,pos):
        if pos == 1:
            self.b_delete()
            return
        cur = self.position(pos - 1)
        if cur and cur.next:
            cur.next = cur.next.next
        else:
            print("position not found")


    def position(self,pos):
        if pos<=0:
            print("invalid position")
            return

        cur = self.head
        for i in range(pos-1):
            if cur.next==None:
                break
            cur = cur.next
        else: return cur
    def display(self):
        if self.head is None:
            print("empty")
            return
        cur = self.head
        while cur:
            print(cur.data,end="->")
            cur = cur.next

    def pos_insert(self,data,pos):
        if pos == 1:
            self.b_insert(data)
            return
        newnode = Node(data)
        cur = self.position(pos-1)
        if cur:
            newnode.next = cur.next
            cur.next = newnode
        else: print("position not found")

obj = Linked_list()
obj.b_insert(10)
obj.e_insert(8)
obj.e_insert(36)
obj.display()
print()
obj.pos_delete(4)
obj.display()


#6
class Node:
    def __init__(self,data):
        self.data=data
        self.next = None

class Linked_list:
    def __init__(self):
        self.head=None

    def b_insert(self,data):
        newnode = Node(data)
        newnode.next = self.head
        self.head = newnode

    def e_insert(self,data):
        newnode = Node(data)
        if self.head is None:
            self.head = newnode
            return
        cur = self.head
        while cur.next:
            cur = cur.next
        cur.next = newnode


    def e_delete(self):
        if self.head is None or self.head.next is None:
            self.head = None
            return
        cur = self.head
        while cur.next.next:
            cur = cur.next
        cur.next = None


    def b_delete(self):
        if self.head:
            self.head = self.head.next

    def position(self,pos):
        if pos<=0:
            print("invalid position")
            return
        cur = self.head
        for i in range(pos-1):
            if cur.next==None:
                break
            cur = cur.next
        else: return cur
    def display(self):
        if self.head is None:
            print("empty")
            return
        cur = self.head
        while cur:
            print(cur.data,end="->")
            cur = cur.next

    def pos_insert(self,data,pos):
        if pos == 1:
            self.b_insert(data)
            return
        newnode = Node(data)
        cur = self.position(pos-1)
        if cur:
            newnode.next = cur.next
            cur.next = newnode
        else: print("position not found")

obj = Linked_list()

obj.b_insert(10)
obj.e_insert(8)
obj.e_insert(36)
obj.display()
print()
obj.pos_insert(17,4)
obj.display()


#7
class Node:
    def __init__(self,data):
        self.data=data
        self.next = None
class Linked_list:
    def __init__(self):
        self.head=None

    def e_insert(self,data):
        newnode = Node(data)
        if self.head is None:
            self.head = newnode
            return
        cur = self.head
        while cur.next:
            cur = cur.next
        cur.next = newnode
    def remove_dup(self):
        cur = self.head
        while cur and cur.next:
            if cur.data == cur.next.data:
                cur.next = cur.next.next
            cur = cur.next
    def display(self):
        if self.head is None:
            print("empty")
            return
        cur = self.head
        while cur:
            print(cur.data,end="->")
            cur = cur.next
t = int(input())
obj= [0]*t
for i in range(t):
    obj[i] = Linked_list()
    n = int(input())
    a = list(map(int,input().split(" ")))
    for j in range(n):
        obj[i].e_insert(a[j])
    obj[i].remove_dup()
for k in obj:
    k.display()
    print()
